스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백 메서드를 통해 초기화 시점을 알려주는 다양한 기능을 제공
또 스프링은 스프링컨테이너가 종료되기 직전에 소멸콜백을 해줌

스프링 빈의 이벤트 라이프사이클
-> 컨테이너 생성
-> 빈 생성
-> 의존관계 주입
-> 초기화 콜백: 빈이 생성되고 빈의 의존관계 주입이 완료된 후 호출
-> 사용
-> 소멸전 콜백: 빈이 소멸되기 직전에 호출
-> 종료

생성자에서 다 해버리면 안되나요???
객체의 생성과 초기화를 분리하는게 좋다!
-> 생성자는 필수 정보를 받고 메모리 할당 
-> 초기화는 이러한 값을 활용해 외부 커넥션 연결 등 다소 무거운 동작 을 수행
-> 생성자 안에서 초기화 작업을 하지말자

스프링은 크게 3가지 방법으로 빈 생명주기 콜백을 지원한다.
인터페이스(InitializingBean: 초기화 콜백, DisposableBean: 종료 콜백)
: 이 인터페이스는 스프링 전용 인터페이스라 스프링 의존적임
: 거의 사용하지 않음

설정 정보에 초기화 메서드, 종료 메서드 지정
@Bean(initMethod = "init", destroyMethod = "close")
: 스프링 빈이 스프링 코드에 의존 안함
: 외부라이브러리 초기화 및 종료 메서드 명을 넣을 수 있다
: destroyMethod 특별한 기능이 있음
: 알아서 close, shutdown을 호출해줌 -> 따로 적어주지 않아도 호출해줌
: 쓰기 싫으면 ""로 둔다

@PostConstruct, @PreDestroy 애노테이션 지원 - recommended
: 스프링 종속이 아니라 자바 표준을 따르는 어노테이션
: 외부라이브러리에는 적용하지 못함
: 외부라이브러리 사용하려면 @Bean 사용


