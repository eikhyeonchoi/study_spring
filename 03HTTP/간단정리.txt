
::: 인터넷 네트워크 :::
인터넷은 어떻게 통신?
IP프로토콜로 통신
지정한 IP주소에 데이터 전달
비연결성, 비신뢰성 등 한계



IP한계 극복
TCP
: 3hand shaking, 전송보장, 순서보장, 대부분 TCP
: 순서안맞아도 다시 보내라고 요청
UDP
: IP에 Port만 추가한 정도



TCP/IP 패킷정보에는 Port가 추가됨
Port란 같은 IP내에서 프로세스 구분 이라고 보면 됨
IP를 아파트 Port를 호수라고 생각하면 편함



DNS 도메인 네임 시스템
IP는 변경될 수 있고 외우기 어려움 -> DNS 도입
ex) google.com 요청 -> DNS서버 -> DNS서버가 google.com에 매칭되는 IP반환 -> IP로 요청

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

::: URI와 웹 브라우저 요청 흐름 :::
URI(Uniform Resource Identifier)
URI가 큰개념이고 URI안에 URL, URN이 포함되어있다
URL: Uniform Resource Locator
URN: Uniform Resource Name



URL의 전체문법
scheme://[userinfo@]host[:port][/path][?query][#fragment]
https://www.google.com:443/search?q=hello&hl=ko
scheme: 주로 프로토콜 사용(ftp, http, https 등)
userinfo: 거의 사용하지 않는다
host: 호스트명(도메인명 또는 IP)
port: 포트, 일반적으로 생략
path: 리소스경로, 계층적구조
query: key=value 형태 '&'로 구분
fragment: html 내부북마크 등에 사용

요청 흐름
ㅣGET /search?q=hello&hl=ko HTTP/1.1
ㅣHost: www.google.com
1. 웹브라우저가 HTTP메서지 생성 - 보낼데이터 A
2. Socket 라이브러를 통해 OS전달(TCP/IP) - A데이터에 추가로 IP, PORT 정보 추가함
3. 인터넷을 통해 원격 서버로 전달함

응답메세지
HTTP/1.1 200 OK
Content-Type: text/html;charset=UTF-8
Content-Length: 3423
<html>
 <body>...</body>
</html>

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

::: HTTP 기본 :::
HTTP/1.1: 가장중요한 버전 가장 많이 사용
HTTP/2: 성능개선
HTTP/3: UDP 사용 및 개선



HTTP 특징
1. 클라이언트 서버 구조
: Request/Response 구조
: 클라이언트는 요청을 보내고 응답을 대기
: 서버가 요청에 대한 결과를 만들어서 응답

2. 무상태 프로토콜(stateless)
: 서버는 클라이언트의 상태를 보존하지 않음
: 무상태이어야지 확정성이 높음(scale out)
: 클라이언트는 매번 추가 데이터를 전송해야함
: stateful은 최소한만 사용한다

3. 비연결성
: 연결을 유지하지 않는다
: 서버 자원을 매우 효율적으로 사용할 수 있음
: 매번 3hand shaking을 해야하기 때문에 단점이 있지만 점점 최적화됨



HTTP메세지 구조
start-line - ●
*( header-field CRLF ) - ★
CRLF - ■
[ message-body ] - ▲

request
GET /search?q=hello&hl=ko HTTP/1.1 - ●
Host: google.com - ★
- ■

response
HTTP/1.1 200 OK - ● 
Content-Type: text/html;charset=UTF-8 - ★
Content-Length: 3423
 - ■
<html> - ▲
 <body>...</body>
</html>

●(시작라인)
: request: HTTP 메서드, 요청대상(path), HTTP 버전
: response: HTTP 버전, HTTP 상태코드, 이유문구(String)

★(HTTP 헤더)
: field-name ":" OWS field-value OWS
: HTTP 전송에 필요한 모든 부가정보

■(CRLF) 
: 줄바꿈

▲(HTTP 메시지 바디)
: 실제 전송할 데이터임
: HTML 문서, 이미지, 영상, JSON 등등 byte로 표현할 수 있는 모든 데이터 전송 가능

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

::: HTTP 메서드 :::
가장 중요한 것은 리소스 식별
API 명세서
회원 목록 조회, 회원 조회, 회원 등록, 회원 수정, 회원 삭제
여기서 리소스는 "회원"임 -> 즉 "회원" 리소스를 URI에 매핑해야함
/members 가 일단 나와야함 
URI는 리소스만 식별하고 행위(조회, 수정 등)은 메서드로 분리해야함



HTTP 메서드 종류
GET
: 조회, 전달하고 싶은 데이터는 쿼리스트링으로
: 메시지 바디는 사용안하는게 좋다

POST
: 요청 데이터 처리
: 메시지 바디를 통해 서버로 요청 데이터를 전달 -> 서버는 처리
: 신규 리소스 등록 및 프로세스 처리
: 다른메서드로 처리하기 어려운경우 애매하면 POST 쓰면됨
: 단순이 데이터 생성하거나, 변경이 아닌 프로세스 처리해야할 때에도 사용
: POST /orders/{orderId}/start-delivery (컨트롤 URI) 으로도 사용가능

PUT
: 리소스가 이씅면 대체 없으면 생성 -> 덮어쓰기
: 클라이언트가 이미 리소스를 식별하고 있음

PATCH
: 부분 대체

DELETE
: 리소스 삭제



HTTP 메서드 속성
안전
: 호출해도 리소스 변경X

멱등
: n번 호출하든 결과가 똑같음
: GET, PUT, DELETE는 멱등 / POST는 멱등 X
: 멱등은 외부 요인으로 중간에 리소스가 변경되는 것 까지는 고려하지 않는다

캐시가능
: GET, HEAD, POST, PATCH 캐시 가능
: 보통 GET, HEAD 정도만 캐시로 사용

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

::: HTTP 메서드 활용 :::
클라이언트 -> 서버 데이터 전송
크게 2가지 방식임 -> 쿼리스트링, 메시지바디

1. 정적 데이터 조회 GET
: 이미지, 정적 텍스트문서
: 쿼리스트링 없이 경로만으로 조회가능

2. 동적 데이터 조회 GET
: 주로 검색, 게시판 목록에서 정렬 필터(검색어)
: 조회조건을 줄여주는 필터, 조회 결과를 정렬하는 정렬조건
: 쿼리스트링 사용

3. HTML Form 데이터 전송
: Content-Type: application/x-www-form-urlencoded 사용
: form의 내용을 메시지 바디를 통해서 전송 key=value 형식
: 전송데이터를 url encofing 처리하기
: Content-Type: multipart/form-data
: 파일업로드 같은 바이너리 데이터 전송시 사용
: 다른 종류(String)의 여러 파일과 폼의 내용 함께 전송 가능(그래서 multipart)
: HTML Form 전송은 GET,POST만 지원함

4. HTTP API 데이터 전송
: 서버 to 서버 통신, 앱 클라이언트 통신, ajax, POST/PUT/PATCH/DELETE 메시지 바디를 통해 데이터전송
: Content-Type: application/json을 주로 사용(사실상 표준임)



API 설계 예시
POST 기반 등록
목록 /members      -> GET
등록 /members      -> POST
조회 /members/{id} -> GET
수정 /members/{id} -> PATCH, PUT, POST
삭제 /members/{id} -> DELETE
: 클라이언트는 등록될 리소스의 URI를 모름
: 서버가 새로 등록된 리소스 URI를 생성해줌 ex) /mebmers/100
: 컬렉션(/members)
: 서버거 관리하는 리소스 디렉토리, 서버가 리소스의 URI를 생성관리

PUT 기반 등록
목록 /files        -> GET
조회 /files/{name} -> GET
등록 /files/{name} -> PUT
삭제 /files/{name} -> DELETE
대량등록 /files    -> POST
: 클라이언트가 리소스 URI를 알고 있어야함
: 클라이언트가 직접 리소스의 URI를 지정
: 스토어(/files)
: 클라이언트가 관리하는 리소스 저장소, 클라이언트가 리소스의 URI를 알고 관리함

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

HTTP 상태코드
2xx (Successful): 요청 정상 처리
200 ok: 요청 성공 - recommended
201 created: 요청 성공해서 새로운 리소스 생성
202 accepted: 요청 접수 but 처리 미완료
204 no content: 요청 성공적으로 수행, 응답 페이로드 본문에 보낼 데이터가 없음


3xx (Redirection): 요청을 완료하려면 추가 행동이 필요
: 웹브라우저는 3xx 응답 결과에 Location 헤더가 있으면 자동으로 이동함

리다이렉션 종류 3가지
1. 영구 리다이렉션 - 특정 리소스의 URI가 영구적으로 이동(301, 308)
301 Move Permanently: 리다이렉트시 요청 메서드가 GET으로 변하고 본문이 제거될 수 있음
308 Permanent Redirect: 리다이렉트 요청 메서드와 본문 유지

2. 일시 리다이렉션 - 일시적인 변경(ex. 주문 완료 후 주문 내역화면으로 이동), PRG(POST/Redirect/Get)
302 Found: 리다이렉트시 요청 메서드가 GET으로 변하고 본문이 제거될 수 있음 - recommended
307 Temporary Redirect: 302와 기능이 같음, 리다이렉트시 요청 메서드와 본문 유지
303 See Other: 302와 기능은 같음, 리다이렉트시 요청 메서드가 GET으로 변경

3. 특수 리다이렉션 - 결과 대신 캐시를 사용
300 Multiple Choice: 안씀
304 Not Modified: 캐시목적으로 사용, 클라이언트에게 리소스가 수정되지 않았음을 알림, 브라우저에 남아있는 캐시를 사용하라는 말, 캐시 재사용


4xx (Client Error): 클라이언트 오류, 잘못된 문법등으로 서버가 요청을 수행할 수 없음, 똑같은 재시도가 실패
400 Bad Request: 요청 파라미터 잘못, API 스펙이 맞지않을 때
401 Unauthorized: 인증되지 않음, 응답에 WWW-Authenticate 헤더와 함께 인증 방법을 설명 
403 Forbidden: 서버가 요청을 이해했지만 승인을 거부함, 접근권한 불충분
404 Not Found: 요청 리소스를 찾을 수 없음


5xx (Server Error): 서버 오류, 서버가 정상 요청을 처리하지 못함, 재시도시 성공할 가능성이 있음
500 Internal Server Error: 서버 내부 문제
503 Service Unavailable: 서비스 이용 불가, 과부하 또는 예정된 작업으로 잠시 요청 처리할 수 없음

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

::: HTTP 헤더 - 일반헤더 :::
표현 = 표현 헤더 + 표현 데이터
표현 헤더는 표현 데이터를 해석할 수 있는 정보 제공


==>> 표현 헤더는 전송 응답 둘 다 사용
표현 
Content-Type: 표현 데이터의 형식
: 미디어 타입, 문자 인코딩 등
: ex) text/html; charset=utf-8, application/json

Content-Encoding: 표현 데이터 압축 방식
: 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가
: ex) gzip, deflate, identity

Content-Language: 표현 데이터의 자연 언어
: ex) ko, en, en-US

Content-Length: 표현 데이터의 길이
: 바이트 단위
: Transfer-Encoding을 사용하면 사용하면 안됨



==>> 협상 헤더는 요청시에만 사용
협상(컨텐트 네고시에이션) - 클라이언트가 선호하는 표현 요청
Accept: 클라리언트가 선호하는 미디어 타입 전달
: Quality Value(q) 값사용 생략시 1 (0 ~ 1)
: ex) Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
: 구체적인것이 우선
: ex) Accept: text/*, text/plain, text/plain;format=flowed, */*
: text/plain;foramt=flowed -> text/plain -> text/* -> */*

Accept-Charset: 클라이언트가 선호하는 문자 인코딩
Accept-Encoding: 클라이언트가 선호하는 압축 인코딩
Accept-Language: 클라이언트가 선호하는 자연 언어



전송방식
단순 전송: Content-Length - 길이를 이미 알 때
압축 전송: Contnet-Encoding - 압축방식을 알려줘야함
분할 전송: Transfer-Encoding - Content-Length를 넣으면 안됨
범위 전송: Range, Content-Range




일반 정보
From(request)
: 유저 에이전트의 이메일 정보

Referer(request)
: 이전 웹 페이지 주소
: 유입 경로 분석 가능

User-Agent(request)
: 유저 에이전트 어플리케이션 정보

Server(response)
: 요청을 처리하는 ORIGIN 서버의 소프트웨어 정보

Date(response)
: 메시지가 발생한 날짜, 시간



특별한 정보
Host(request)
: 필수
: 하나의 서버가 여러 도메인을 처리해야할 때

Location(response)
: 페이지 리다이렉션
: 3xx 응답의 결과의 Location 헤더가 있으면, Location 위치로 자동 이동
: 201(created)의 Location 값은 요청에 의해 생성된 리소스 URI
: 3xx(redirection)의 Location 값은 요청을 자동으로 리디렉션 하기 위한 대상 리소스

Allow(response)
: 허용가능한 HTTP 메서드
: 405(Method Not Allowed) 에서 응답에 포함해야함
: ex) Allow: GET, HEAD, PUT

Retry-After(response)
: 유저 에이전트가 다음 요청을 하기까지 기다려얗 하는시간
: 503일 때 보내줌



인증
Authorization(request)
: 클라이언트 인증 정보를 서버에 전달

WWW-Authenticate(response)
: 리소스 접근 시 필요한 인증 방법 정의
: 401 Unauthorized 응답과 함께 사용



쿠키
Set-Cookie(response)
: 서버에서 클라이언트로 쿠키 전달
: stateless를 보완할 수 있다
Cookie

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

::: HTTP 헤더 - 캐시와 조건부 요청 :::
캐시가 없다면?
: 데이터가 바뀌지 않더라도 네트워크를 통해서 데이터를 다운로드 받아야함
: 느린 사용자 경험

캐시가 있다면?
: reponse
: cache-control: max-age=60 -> 60초 동안 캐시 유지
: 다시 데이터를 불러올 때 브라우저는 캐시 유효시간을 검증한 후
: 캐시데이터를 가져옴 (네트워크를 사용하지 않아도됨)
: 빠른 사용자 경험
: 만약 캐시 유효시간이 초과되었다면? -> 다시요청



캐시 검증과 조건부 요청1
-> 캐시 시간 초과하면 다시요청한다
-> 만약 서버에서 기존 데이터를 변경하지 않았는데도 다시 요청하는건가?
-> 만약 데이터가 변경되지 않았다면 다시 받는건 낭비임
-> 저장했던 로컬 캐시를 다시 쓸 수 있다, 단 바뀌지 않았다는 검증이 필요함
-> response
-> Last-Modified이 필드를 보고 검증할 수 있다(데이터 변경이 있는지 없는지)
-> 브라우저는 요청을 이 Last-Modified를 저장했다가 다시 서버에 요청할 때
-> if-modifed-since라고 보냄
-> 똑같으면 서버는 304(Not Modified) 응답을 보냄 -> HTTP Body가 없음
-> 즉 로컬캐시를 다시 사용하게됨
-> 검증헤더: Last-Modified
-> 조건부요청: if-modified-since

정리
캐시 유효시간이 초과해도, 서버의 데이터가 갱신되지 않으면 304(바디X)
클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타 정보갱신
클라이언트는 캐시에 저장되어 있는 데이터 재활용함
결과적으론 헤더 정보만 다운로드(304는 바디가 없음)



캐시 검증과 조건부 요청2
검증 헤더
: 캐시 데이터와 서버 데이터가 같은지 검증하는 데이터임
: Last-Modified, ETag

조건부 요청 헤더
: 검증 헤더로 조건에 따른 분기
: If-Modified-Since - Last-Modified 사용
: If-None-Match - ETag 사용
: 조건만족하면 200, 만족하지 않으면 304


If-Modified-Since: 이후에 데티어가 수정되었다면
미변경시 304 (http body 없음)
변경시 200 (http body 포함)
단점
: 1초 미만 단위로 캐시 조정 불가
: 날짜 기반 로직 사용
: 데이터를 수정해서 날짜가 다르지만, 수정 후 데이터가 동일한 경우


If-None-Match - ETag
: 캐시용 데이터에 임의의 고유한 버전 이름을 달아둠
: 데이터가 변경되면 이 이름을 바꾸어서 변경함(Hash 다시 생성)
: 단순히 ETag만 보내서 같으면 유지 다르면 다시받음
: If-Modified-Since - Last-Modified와 로직은 동일함
: 캐시 제어 로직을 서버에서 완전히 관리



캐시와 조건부 요청 헤더
Cache-control
: max-age - 캐시 유효 시간, 초 단위
: no-cache - 데이터는 캐시하시만 항상 origin 서버에 검증 후 사용
: no-store - 저장 금지



프록시캐시 - 중간 캐시 서버
Cache-Control
: public - 응답이 public 캐시에 저장되어도 됨
: private - 응답이 해당 사용자만을 위한 것(private 캐시에 저장, 기본 값)
: s-maxage - 프록시 캐시에만 적용되는 max-age



캐시 무효화
Cache-Control: no-cache, no-store, must-revalidate
Pragma: no-cache
: 다 헤더에 넣어주면 캐시되지 않는다

no-cache  vs  must-revalidate
원서버에 접근을 못하는경우
no-cache는 Error or 200
must-revalidate는 504(Gateway Timeout)