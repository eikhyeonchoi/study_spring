사용자 정의 리포지토리 구현
jpa말고 다른 mybatis, querydsl등 따로 사용하고 싶을 때 정의할 수 있음

ex)
1.
public interface MemberRepositoryCustom {
 List<Member> findMemberCustom();
}
: 따로 정의할 커스텀 "interface"를 만든다 이름자유

2.
public interface MemberRepository extends JpaRepository<Member, Long>, MemberRepositoryCustom {}
: 메인 repository에서 커스텀 interface를 상속받음

3. 
public class MemberRepositoryImpl implements MemberRepositoryCustom {
    @Override
    public List<Member> findMemberCustom() {}
}
: MemberRepository + "Impl" 이라고 이름 맞춰줘야함



Auditing
순수 JPA
: @MappedSuperclass
ex)
@Getter
@MappedSuperclass
public class JpaBaseEntity {
    @Column(updatable = false)
    private LocalDateTime createdDate;
    private LocalDateTime updatedDate;

    @PrePersist
    public void prePersist() {
        LocalDateTime now = LocalDateTime.now();
        createdDate = now;
        updatedDate = now;
    }

    @PreUpdate
    public void preUpdate() {
        updatedDate = LocalDateTime.now();
    }
}

spring data JPA:
: @EnableJpaAuditing 스프링 부트 설정 클래스에 적용해야함
ex)
@Getter
@MappedSuperclass
public class BaseTimeEntity {
    @CreatedDate
    @Column(updatable = false)
    private LocalDateTime createdDate;

    @LastModifiedBy
    private LocalDateTime lastModifiedDate;
}

등록, 수정자 컬럼도 필요하다면??
등록자, 수정자를 처리해주는 AuditorAware 스프링 빈 등록
@Bean
public AuditorAware<String> auditorProvider() {
 return () -> Optional.of(UUID.randomUUID().toString());
}

@EntityListeners(AuditingEntityListener.class)
@MappedSuperclass
@Getter
public class BaseEntity extends BaseTimeEntity{
    @CreatedBy
    @Column(updatable = false)
    private String createdBy;

    @LastModifiedBy
    private String updatedBy;
}



도메인 클래스 컨버터 - not recommended
: HTTP 파라미터로 넘어온 엔티티의 아이디로 엔티티 객체를 찾아서 바인딩
: 도메인 클래스 컨버터로 엔티티를 파라미터로 받으면, 이 엔티티는 단순 조회용으로만 사용해야 한다
@GetMapping("/members2/{id}")
public String findMember2(@PathVariable("id") Member member) {
    return member.getUsername();
}



페이징과 정렬
: 스프링 데이터가 제공하는 페이징과 정렬 기능을 스프링 MVC에서 편리하게 사용할 수 있다.
@GetMapping("/members")
public Page<Member> list(Pageable pageable) {
    Page<Member> page = memberRepository.findAll(pageable);
    return page;
}
: 파라미터로 Pageable 을 받을 수 있다.
: Pageable 은 인터페이스, 실제는 org.springframework.data.domain.PageRequest 객체 생성
: 예) /members?page=0&size=3&sort=id,desc&sort=username,desc
: page: 현재 페이지, 0부터 시작한다.
: size: 한 페이지에 노출할 데이터 건수
: sort: 정렬 조건을 정의한다. 예) 정렬 속성,정렬 속성...(ASC | DESC), 정렬 방향을 변경하고 싶으면 sort
: 파라미터 추가 (asc 생략 가능)

기본값 설정
1. 글로벌 설정
spring.data.web.pageable.default-page-size=20 /# 기본 페이지 사이즈/
spring.data.web.pageable.max-page-size=2000 /# 최대 페이지 사이즈/

2. 개별설정
(@PageableDefault(size = 12, sort = “username”, direction = Sort.Direction.DESC) Pageable pageable



새로운 엔티티를 구별하는 방법
매우 중요!!!
save() 메서드
새로운 엔티티면 저장( persist )
새로운 엔티티가 아니면 병합( merge )

새로운 엔티티를 판단하는 기본 전략
: 식별자가 객체일 때 null 로 판단
: 식별자가 자바 기본 타입일 때 0 으로 판단
: Persistable 인터페이스를 구현해서 판단 로직 변경 가능
public interface Persistable<ID> {
    ID getId();
    boolean isNew();
}

-> pk 직접할당시, 다른 조취를 취해주지 않으면 save 호출 시 merge를 수행하게됨
-> 따라서 implements Persistable<pk타입>을 해주는게 좋다

JPA 식별자 생성 전략이 @GenerateValue 면 save() 호출 시점에 식별자가 없으므로 새로운
엔티티로 인식해서 정상 동작한다. 그런데 JPA 식별자 생성 전략이 @Id 만 사용해서 직접 할당이면 이미
식별자 값이 있는 상태로 save() 를 호출한다. 따라서 이 경우 merge() 가 호출된다. merge() 는 우선
DB를 호출해서 값을 확인하고, DB에 값이 없으면 새로운 엔티티로 인지하므로 매우 비효율 적이다. 따라서
Persistable 를 사용해서 새로운 엔티티 확인 여부를 직접 구현하게는 효과적이다.
참고로 등록시간( @CreatedDate )을 조합해서 사용하면 이 필드로 새로운 엔티티 여부를 편리하게 확인할
수 있다. (@CreatedDate에 값이 없으면 새로운 엔티티로 판단)
-> @GeneratedValue를 안쓰고 @Id만써서 직접할당이어도 merge를 쓰면 안됨
ex)
@EntityListeners(AuditingEntityListener.class) 
public class Item implements Persistable<String> {
    @Id
    private String id;
    @CreatedDate // persist가 되기 전에 호출됨
    private LocalDateTime createdDate;

    public Item(String id) {this.id = id;}

    @Override
    public String getId() {return id;}

    @Override
    public boolean isNew() {return createdDate == null;}
}



Projections
: 엔티티 대신 DTO를 편리하게 조회할 때 사용
ex)
public interface UsernameOnly {String getUsername();}
List<UsernameOnly> findProjectionsByUsername(String username);
: 프로퍼티 형식(getter)의 인터페이스를 제공하면, 구현체는 스프링 데이터 JPA가 제공

인터페이스 기반 Open Proejctions
public interface UsernameOnly {
    @Value("#{target.username + ' ' + target.age + ' ' + target.team.name}")
    String getUsername();
}
: 단! 이렇게 SpEL문법을 사용하면, DB에서 엔티티 필드를 다 조회해온 다음에 계산한다! 따라서 JPQL SELECT 절 최적화가 안된다.

클래스 기반 Projection
public class UsernameOnlyDto {
    private final String username;
    public UsernameOnlyDto(String username) {
        this.username = username;
    }
    public String getUsername() {
        return username;
    }
}

동적 Projections
<T> List<T> findProjectionsByUsername(String username, Class<T> type);
List<UsernameOnly> result = memberRepository.findProjectionsByUsername("m1", UsernameOnly.class);

중첩 구조 처리
public interface NestedClosedProjection {
    String getUsername();
    TeamInfo getTeam();
    interface TeamInfo {
        String getName();
    }
}
: username은 딱 username만 가져오는데 team같은 경우는 entity 전체를 가져와서 최적화가 안된다

projectios 정리
: 프로젝션 대상이 root 엔티티면 유용하다.
: 프로젝션 대상이 root 엔티티를 넘어가면 JPQL SELECT 최적화가 안된다!
: 실무의 복잡한 쿼리를 해결하기에는 한계가 있다.
: 실무에서는 단순할 때만 사용하고, 조금만 복잡해지면 QueryDSL을 사용하자



native query
: 권장X, 마지막에 사용

projections 활용
@Query(value = "SELECT m.member_id as id, m.username, t.name as teamName " +
    "FROM member m left join team t",
    countQuery = "SELECT count(*) from member",
    nativeQuery = true)
Page<MemberProjection> findByNativeProjection(Pageable pageable);