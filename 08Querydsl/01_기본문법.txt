기본문법
ex)
JPAQueryFactory queryFactory = new JPAQueryFactory(em);
QMember qMember = QMember.member;
Member member = queryFactory.select(qMember).from(qMember).where(qMember.username.eq("member111")).fetchOne();
assertThat(member.getAge()).isEqualTo(10);



기본 Q-type 활용
QMember qMember = new QMember("m"); // 별칭 직접 지정 - 같은 테이블 조인할 경우에만 별칭 사용함
QMember qMember = QMember.member; // 기본 인스턴스 사용(static import를 하면 코드를 더 깔끔하게 할 수 있다)



검색 조건 쿼리
검색 조건은 .and() , . or() 를 메서드 체인으로 연결할 수 있다
체인으로 안넘기고 파라미터로 넘기면 and로 연결됨
참고: select , from 을 selectFrom 으로 합칠 수 있음
ex)
member.username.eq("member1") // username = 'member1'
member.username.ne("member1") //username != 'member1'
member.username.eq("member1").not() // username != 'member1'
member.username.isNotNull() //이름이 is not null
member.age.in(10, 20) // age in (10,20)
member.age.notIn(10, 20) // age not in (10, 20)
member.age.between(10,30) //between 10, 30
member.age.goe(30) // age >= 30
member.age.gt(30) // age > 30
member.age.loe(30) // age <= 30
member.age.lt(30) // age < 30
member.username.like("member%") //like 검색
member.username.contains("member") // like ‘%member%’ 검색
member.username.startsWith("member") //like ‘member%’ 검색

★★★
★★★
★★★
where문에서 만약 null이 들어가면 무시됨
★★★
★★★
★★★



결과 조회
fetch() : 리스트 조회, 데이터 없으면 빈 리스트 반환
fetchOne() : 단 건 조회
결과가 없으면 : null
결과가 둘 이상이면 : com.querydsl.core.NonUniqueResultException
fetchFirst() : limit(1).fetchOne()
fetchResults() : 페이징 정보 포함, total count 쿼리 추가 실행
fetchCount() : count 쿼리로 변경해서 count 수 조회



정렬
.orderBy(member.age.desc(), member.username.asc().nullsLast())
desc() , asc() : 일반 정렬
nullsLast() , nullsFirst() : null 데이터 순서 부여



페이징
.offset(1) //0부터 시작(zero index)
.limit(2) //최대 2건 조회
queryResults.getTotal()
queryResults.getLimit()
queryResults.getOffset()
queryResults.getResults()..size()
참고: 실무에서 페이징 쿼리를 작성할 때, 데이터를 조회하는 쿼리는 여러 테이블을 조인해야 하지만,
count 쿼리는 조인이 필요 없는 경우도 있다. 그런데 이렇게 자동화된 count 쿼리는 원본 쿼리와 같이 모두
조인을 해버리기 때문에 성능이 안나올 수 있다. count 쿼리에 조인이 필요없는 성능 최적화가 필요하다면,
count 전용 쿼리를 별도로 작성해야 한다



집합
queryFactory
    .select(
        member.count(),
        member.age.sum(),
        member.age.avg(),
        member.age.max(),
        member.age.min()
    )
    .from(member)
    .fetch();
Tuple tuple = result.get(0);
tuple.get(member.count())
tuple.get(member.age.sum())
tuple.get(member.age.avg())
tuple.get(member.age.max())
...

groupBy 사용
List<Tuple> result = queryFactory
    .select(team.name, member.age.avg())
    .from(member)
    .join(member.team, team)
    .groupBy(team.name)
    .having() // having도 가능함
    .fetch();
Tuple teamA = result.get(0);
Tuple teamB = result.get(1);
teamA.get(team.name)
teamA.get(member.age.avg())
...



조인
join(조인 대상, 별칭으로 사용할 Q타입)
List<Member> result = queryFactory
    .selectFrom(member)
    .join(member.team, team)
    .where(team.name.eq("teamA"))
    .fetch();
join() , innerJoin() : 내부 조인(inner join)
leftJoin() : left 외부 조인(left outer join)
rightJoin() : rigth 외부 조인(rigth outer join)
JPQL의 on 과 성능 최적화를 위한 fetch 조인 제공 다음 on 절에

세타 조인
연관관계가 없는 필드로 조인
.from(member, team)
from 절에 여러 엔티티를 선택해서 세타 조인

on절
List<Tuple> result = queryFactory
    .select(member, team)
    .from(member)
    .leftJoin(member.team, team).on(team.name.eq("teamA"))
    .fetch();
참고: on 절을 활용해 조인 대상을 필터링 할 때, 외부조인이 아니라 내부조인(inner join)을 사용하면,
where 절에서 필터링 하는 것과 기능이 동일하다. 따라서 on 절을 활용한 조인 대상 필터링을 사용할 때,
내부조인 이면 익숙한 where 절로 해결하고, 정말 외부조인이 필요한 경우에만 이 기능을 사용하자.

연관관계 없는 엔티티 외부조인
List<Tuple> result = queryFactory
    .select(member, team)
    .from(member)
    .leftJoin(team).on(member.username.eq(team.name))
    .fetch();
주의! 문법을 잘 봐야 한다. leftJoin() 부분에 일반 조인과 다르게 엔티티 하나만 들어간다.

fetch join
페치 조인은 SQL에서 제공하는 기능은 아니다. SQL조인을 활용해서 연관된 엔티티를 SQL 한번에
조회하는 기능이다. 주로 성능 최적화에 사용하는 방법이다
Member findMember = queryFactory
    .selectFrom(member)
    .join(member.team, team).fetchJoin()
    .where(member.username.eq("member1"))
    .fetchOne();



서브쿼리
where절에 subquery
com.querydsl.jpa.JPAExpressions 사용
QMember member = new QMember("member");
QMember memberSub = new QMember("memberSub");
List<Member> result = queryFactory
    .selectFrom(member)
    .where(member.age.eq( // in, goe... 등 사용가능
            JPAExpressions
            .select(memberSub.age.max())
            .from(memberSub)
        )
    ).fetch();

select절에 subquery
List<Tuple> fetch = queryFactory
    .select(member.username,
        JPAExpressions
        .select(memberSub.age.avg())
        .from(memberSub)
    ).from(member).fetch();

from 절의 서브쿼리 한계
JPA JPQL 서브쿼리의 한계점으로 from 절의 서브쿼리(인라인 뷰)는 지원하지 않는다. 당연히 Querydsl도 지원하지 않는다.
from 절의 서브쿼리 해결방안
1. 서브쿼리를 join으로 변경한다. (가능한 상황도 있고, 불가능한 상황도 있다.)
2. 애플리케이션에서 쿼리를 2번 분리해서 실행한다.
3. nativeSQL을 사용한다.



case문
List<String> result = queryFactory
    .select(member.age
        .when(10).then("열살")
        .when(20).then("스무살")
        .otherwise("기타")
    )
    .from(member)
    .fetch();

List<String> result = queryFactory
    .select(
        new CaseBuilder()
        .when(member.age.between(0, 20)).then("0~20살")
        .when(member.age.between(21, 30)).then("21~30살")
        .otherwise("기타")
    )
    .from(member)
    .fetch()

예를 들어서 다음과 같은 임의의 순서로 회원을 출력하고 싶다면?
1. 0 ~ 30살이 아닌 회원을 가장 먼저 출력
2. 0 ~ 20살 회원 출력
3. 21 ~ 30살 회원 출력
NumberExpression<Integer> rankPath = new CaseBuilder()
    .when(member.age.between(0, 20)).then(2)
    .when(member.age.between(21, 30)).then(1)
    .otherwise(3);

List<Tuple> result = queryFactory
    .select(member.username, member.age, rankPath)
    .from(member)
    .orderBy(rankPath.desc())
    .fetch();



상수, 문자 더하기
상수가 필요하면 Expressions.constant(xxx) 사용
Tuple result = queryFactory
    .select(member.username, Expressions.constant("A"))
    .from(member)
    .fetchFirst();

문자 더하기 concat
String result = queryFactory
    .select(member.username.concat("_").concat(member.age.stringValue()))
    .from(member)
    .where(member.username.eq("member1"))
    .fetchOne();
문자가 아닌 다른 타입들은 stringValue()로 문자로 변환할 수 있다. 이 방법은 ENUM을 처리할 때도 자주 사용한다.