웹서버
: HTTP 기반으로 동작
: 정적 리소스 제공, 기타 부가기능
: NGIX, APACHE

웹어플리케이션서버(WAS)
: HTTP 기반으로 동작
: 웹 서버 기능 포함+ (정적 리소스 제공 가능)
: 프로그램 코드를 실행해서 애플리케이션 로직 수행
: 동적 HTML, HTTP API
: Tomcat

차이 
: 웹 서버는 정적 리소스, WAS는 어플리케이션 로직
: 자바는 서블릿 컨테이너 기능을 제공하면 WAS
: WAS는 애플리케이션 코드를 실행하는데 더 특화
: WAS도 정적 리소스 제공 가능

웹 시스템
WAS - DB
-> 정적리소스 + 어플리케이션 로직 모두 수행
-> WAS에 너무 큰 부하가 걸림

WEB - WAS - DB
-> 웹서버는 정적리소스만 제공
-> WAS는 어플리케이션 로직 처리



서블릿
서블릿을 사용하지 않는다면?
서버 TCP/IP연결 대기, 소켓연결
HTTP 요청 메세지 파싱해서 읽기
Content-Type 확인
... 등등
-> 다 일일히 코드를 작성해야함

서블릿을 지원한다면?
핵심 비즈니스 로직에 집중하면 됨
HTTP 요청 정보를 편리하게 사용할 수 있는 HttpServletRequest
HTTP 응답 정보를 편리하게 제공할 수 있는 HttpServletResponse
WAS가 서블릿 객체에게 HttpServletRequest, HttpServletResponse를 준다
개발자는 HTTP 스펙을 매우 편리하게 사용

★★★
★★★
★★★
HTTP 요청시
: WAS는 Request, Response 객체를 새로 만들어서 서블릿 객체 호출
: 개발자는 Request 객체에서 HTTP 요청 정보를 편리하게 꺼내서 사용
: 개발자는 Response 객체에 HTTP 응답 정보를 편리하게 입력
: WAS는 Response 객체에 담겨있는 내용으로 HTTP 응답 정보를 생성
★★★
★★★
★★★

서블릿 컨테이너
서블릿 객체를 관리해주는 컨테이너(생성, 호출, 관리 - 생명주기 포함)
톰캣처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 함 ( WAS(서블릿지원) = 서블릿컨테이너 = Tomcat )
서블릿 객체는 싱글톤으로 관리함
JSP도 서블릿으로 변환되어 사용
동시 요청을 위한 멀티 쓰레드 지원



동시요청 - 멀티쓰레드
서블릿 컨테이너에 서블릿 객체가 있음
요청이 오면 누가 서블릿 객체를 호출할까? -> 쓰레드가 호출함
결국 요청당 한 요청당 한 쓰레드가 할당됨
쓰레드는 한번에 하나의 코드 라인만 수행
여러 요청이 오면 요청만큼 쓰레드를 생성하면 됨
장점 - 동시요청 처리가능(리소스 허용할 떄 까지)
단점 - 생성비용 비쌈, 컨텍스트 스위칭 비용 발생, 생성제한이 없어서 리소스 임계점을 넘으면 죽을 수 있음

보통 "쓰레드 풀"을 사용함 (톰캣은 최대 200개 기본 설정)
-> 요청옴 
-> 쓰레드 풀에 대기 중인 쓰레드 요청(없으면 대기or거절) 
-> 쓰레드가 서블릿 호출 
-> 결과반환 하면 쓰레드풀에 쓰레드 반납
죽이고 생성하는게 아니라 미리 만들어 놓고 대여?하는 방식으로 사용(계속 만들고 없애는게 아님)

WAS의 주요 튜닝 포인트는 최대 쓰레드(max thread) 수이다.

핵심 -> WAS가 멀티쓰레드를 지원하기 때문에 관련 코드를 신경쓰지 않아도됨



정적리소스
정적html, 이미지, 영상 등 

동적 HTML
WAS에서 데이터를 가져온 후 동적으로 HTML을 생성 후 반환
뷰템플릿(JSP, Thymeleaf등)

HTTP API
데이터만 주고받음(json)
앱, 웹, 서버to서버 등 사용

SSR 서버 사이드 렌더링
서버에서 최종 HTML을 생성해 클라이언트에 전달(JSP, Thymeleaf 등)

CSR 클라이언트 사이드 렌더링
HTML결과를 js를 사용해 웹브라우저에서 동적으로 생성해서 적용  



스프링부트
서버를 내장
전에는 WAS를 직접 설치하고, 소스는 War파일을 만들어서 설치한 WAS배포
스프링 부트는 빌드 결과(Jar)에 WAS 서버를 포함 -> 빌드 배포 단순화
