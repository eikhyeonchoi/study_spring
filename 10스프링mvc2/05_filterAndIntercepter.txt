서블릿 필터
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러
참고로 스프링을 사용하는 경우 여기서 말하는 서블릿은 스프링의 디스패처 서블릿으로 생각하면 된다

public class LogFilter implements Filter {}
필터를 사용하려면 필터 인터페이스를 구현해야 한다.

스프링 부트를 사용한다면 FilterRegistrationBean을 사용해서 등록



스프링 인터셉터
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러
스프링 인터셉터는 디스패처 서블릿과 컨트롤러 사이에서 컨트롤러 호출 직전에 호출

preHandle 
: 컨트롤러 호출 전에 호출된다. (더 정확히는 핸들러 어댑터 호출 전에 호출된다.)
: preHandle 의 응답값이 true 이면 다음으로 진행하고, false 이면 더는 진행하지 않는다.

postHandle 
: 컨트롤러 호출 후에 호출된다. (더 정확히는 핸들러 어댑터 호출 후에 호출된다.)
: 컨트롤러에서 예외가 발생하면 호출되지 않음

afterCompletion 
: 뷰가 렌더링 된 이후에 호출된다.
: 컨트롤러에서 예외가 발생해도 항상 호출됨

패턴매칭
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/util/pattern/PathPattern.html



ArgumentResolver ppt확인
public class LoginMemberArgumentResolver implements HandlerMethodArgumentResolver {
    @Override
    public boolean supportsParameter(MethodParameter parameter) {
        boolean hasLoginAnnotation = parameter.hasParameterAnnotation(Login.class);
        boolean hasMemberType = Member.class.isAssignableFrom(parameter.getParameterType());
        return hasLoginAnnotation && hasMemberType;
    }

    @Override
    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
        
        HttpServletRequest request = (HttpServletRequest)
        webRequest.getNativeRequest();
        HttpSession session = request.getSession(false);
        if (session == null) {
            return null;
        }

        return session.getAttribute(SessionConst.LOGIN_MEMBER);
    }
}
