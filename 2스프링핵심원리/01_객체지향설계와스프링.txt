자바 - 객체 지향
spring은 객체 지향 언어가 가진 강력한 특징을 살려냄

좋은 객체 지향
다형성 - 역할(interface)과 구현(class, object)
    클라이언트를 변경하지 않고도 서버의 구현 기능을 유연하게 변경할 수 있다
    사람(클라이언트) -> 자동차 역할 -> K3, AVANTE, TESLA (자동차역할 구현체)
    자동차가 바뀐다고 해서 사람이 운전을 못하는 것은 아니다
    어떻게? = 모든 자동차가 자동차 역할의 따라 설계되고 만들어졌기 때문

5가지 원칙(SOLID)
SRP: 단일 책임 원칙
    한 클래스는 하나의 책임
    중요한 기준은 변경, 변경이 있을 때 파급효과가 적으면 잘 따른 것

OCP: 개방 폐쇄 원칙
    확장에는 열려있으나 변경에는 닫혀있다 -> 다형성

LSP: 리스코프 치환 원칙
    다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야함
    컴파일에 성공하는 것을 넘어서는 말

ISP: 인터페이스 분리 원칙
    특정 클라이언트를 위한 인터페이스가 여러 개가 범용 인터페이스 하나보다 낫다
    인터페이스도 적당한 크기로 분리하는게 맞다
    자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리

DIP: 의존관계 역전 원칙
    추상화에 의존해야지, 구체화에 의존하면 안됨
    구현 클래스에 의존하지 말고, 인터페이스에 의존할 것
    =역할에 의존하게 해야 한다는 것과 같다

다형성만으로는 OCP, DIP를 지킬 수 없다
public class MemberService {
    private MemberRepository m = new MemoryMemberRepository(); // 기존
    private MemberRepository m = new JdbcMemberRepository();   // 수정
    // OCP 위반
    // 클라이언트(service)를 직접 수정했다
    // DIP 위반
    // 인터페이스(MemberRepository)에도 의존하지만 구현(Memory,Jdbc)에도 의존하고 있다
}

=> 스프링은 다음 기술로 다형성 + OCP, DIP를 가능하게 지원
    DI(Dependancy Injection): 의존관계, 의존성 
    클라이언트 코드의 변경 없이 기능 확장

모든 설계에 역할과 구현을 분리해야함
모든 설계에 인터페이스를 부여하자