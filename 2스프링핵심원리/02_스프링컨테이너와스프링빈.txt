스프링 컨테이너의 생성 과정
1. 스프링 컨테이너 생성
2. 스프링 빈 등록
3. 스프링 빈 의존관계 설정 준비
4. 스프링 빈 의존관계 설정 완료



::: DI ::: 
스프링컨테이너가 DIP, OCP를 지킬 수 있도록 DI를 해준다
예를들면
public class MemberServiceImpl {
    // 스프링 도입 전
    private final MemberRepository m = new MemoryMemberRepository();
    private final MemberRepository m = new JdbcMemberRepository();
    : 이 코드는 다형성을 활용하기는 했다 하지만 DIP, OCP를 지키지 못했음
    : DIP 위반 - 역할(MemberRepository)에 의존했지만 구현체(new MemoryMemberRepository())에도 의존했다
    :            만약 MemoryMemberRepository가 아니라 다른 repository로 바꾸려면 코드를 직접 수정해야한다
    : OCP 위반 - 다른 repository로 바꾸기 위해 클라이언트(MemberServiceImpl)를 직접 수정했기 때문에 변경금지를 위반함


    // 스프링 도입 후
    private final MemberRepository m;
    public MemberServiceImpl(MemberRepository m) {
        this.m = m;
    }
    : 인터페이스에만 의존했기 때문에 DIP를 잘 지켰고
    : 다른 repository로 바꿀때 MemberServiceImpl를 수정하지 않아도 되기 때문에 OCP를 잘 지킨 코드
}

스프링에서는 스프링컨테이너가 repository를 알아서 주입(DI)해주고 MemberServiceImpl를 생성해준다
예시 코드
public class AppConfig {
    public MemberService mebmerService() {
        return new MemberServiceImpl(new MemoryMemberRepository());
    } 
    // 이런식으로 의존관계를 설정해준다
}

=> 사용영역(ServiceImpl)은 전혀 건들지 않고 구성영역(AppConfig)만 고쳐서 수정(교체및 확장)할 수 있다



::: IoC :::
AppConfig가 등장한 후 구현 객체는 자신의 로직을 실행하는 역할만 담당함(~~~Impl)
어떤 repository를 넣을지 모름 -> 제어권이 AppConfig에 있다
심지어 ~~Impl 조차도 AppConfig가 생성한다
이렇듯 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(IoC)라고 함

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

ApplicationContext를 스프링 컨테이너라고 함
원랜 AppConfig를 직접 만들어 DI를 직접해주었음
@Configuration이 붙은 AppConfig를 설정 정보로 사용
@Bean이라 적힌 메서드를 모두 호출해 반환된 객체를 스프링컨테이너에 등록 = 스프링 빈이라고 칭함
ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
ac.getBean("memberService", MemberService.class);
이런식으로 getBean("메서드명", Class)를 사용해 스프링빈 객체를 얻어 사용함

@Configuration 어노테이션으로 스프링 컨테이너를 만들 수(지정할 수) 있다
@Bean 어노테이션으로 스프링 빈을 등록할 수 있다


스프링 빈 조회 - 상속관계
: 부모 타입으로 조회하면, 자식 타입도 함께 조회한다
: Object로 조회하면 모든 빈 다 조회함
※ 메서드는 찾아보기

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

BeanFactory와 ApplicationContext
BeanFactory
: 스프컨테이너의 최상위 인터페이스
: 스프링 빈을 관리 및 조회 - getBean() 제공

ApplicationContext
: BeanFactory 기능을 모두 상속받아 제공
: BeanFactory와의 차이는?
: 부가기능이 붙음
: + MessageSource - 국제화
: + EnvironmentCapable - 로컬 ,개발,운영등을 구분해서 처리
: + ApplicationEventPublisher -이벤트를 발행하고 구독하는 모델을 편리하게 지원
: + ResourceLoader - 파일,클래스패스,외부 등에서 리소스를 편리하게 조회

스프링 빈 설정 메타 정보
??? 자바코드 또는 xml 등 다양한 설정 형식을 지원할 수 있는 이유 ???
((( 스프링컨테이너 ---참조---> BeanDefinition - 역할 / 자바코드, xml - 구현체 )))
: BeanDefinition - 역할(interface)
: 자바코드, xml - 구현체(class, xml)
: 스프링컨테이너는 추상화에만 의존하고 있기 때문에 구현체는 몰라도 된다(자바소스인지 xml인지) -> 즉 DIP를 잘 지켜서 구현했기 때문에 가능한 것
: BeanDefinition을 빈 설정 메타정보라고 한다
: @Bean or <bean> 당 각각 하나씩 메타정보가 생성됨
: 스프링컨테이너는 이 메타정보를 기반으로 스프링 빈을 생성하게됨
: 스프링 컨테이너마다 Reader가 있어서 자바코드 또는 xml 파일을 읽어서 빈을 만든다