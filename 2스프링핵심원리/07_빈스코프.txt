스프링 빈은 기본적으로 스프링 컨테이너 시작과 함께 생성되고 컨테이너가 종료될 때 까지 유지된다

스코프 지원
1. 싱글톤
: 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.

2. 프로토타입
: 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입, 초기화까지만 관여하고 더는 관리하지 않는 짧은 범위 스코프
: @PreDetrory 등이 호출되지 않는다

3. 웹 관련 스코프
    request: 웹 요청 하나가 들어오고 나갈때 까지 유지 요청마다 별도의 빈 인스턴스 생성되고 관리
    session: 웹 세션이 생성되고 종료될 때 까지 유지
    application: 웹의 서블릿 컨텍스트와 같은 범위로 유지



싱글톤 빈과 프로토타입 빈 함께 사용시 문제점
만약 싱글톤 빈이 프로토타입 빈을 주입받는 경우엔 프로토타입 빈을 매번 새로 생성하지 않고
가지고 있는 프로토타입 빈을 사용한다 -> 주입받는 시점에만 각각 새로운 프로토타입 빈을 생성함
해결법
1. org.springframework.beans.factory -> ObjectProvider.getObject()
2. javax.inject -> Provider.get() (단, 라이브러리를 추가해야한다)

예를들어 
@Scope(value = "request")인 스프링 빈이 있는데
request가 없으면 컴파일 오류가 발생한다(컨테이너에 빈을 넣지 못함)
왜? scope이 request라 http요청이 들어올 때 생성되기 때문에
그럴때 Provider를 사용하면 좋다
Provider를 사용하지 않으려면 ??
+ @Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS)
: proxyMode를 사용하면 가짜 프록시 클래스를 만들어두고 HTTP Request와 상관없이 가짜 프록시 클래스를 다른 빈에 미리 주입해둔다(CGLIB 기술)
: 클래스면 TARGET_CLASS 인터페이스면 INTERFACES
: 가짜 프록시 객체는 요청이 오면 그때 내부에서 진짜 빈을 요청하는 위임로직이 들어가있음

Provider, proxyMode 의 특징
진짜 객체 조회를 꼭 필요한 시점까지 지연처리 한다는 점
다형성과 DI컨테이너가 가진 큰 장점임
