// EAGER 설정 시, member 쿼리 1번, team 쿼리 2번 -> team 쿼리 2번 날리는거 자체가 N+1
List<Member> list = em.createQuery("select m from Member m", Member.class).getResultList();
for (Member member : list) {
    System.out.println(member);
}

// LAZY 설정 시, member 쿼리 1번, team 쿼리 0번 -> team 사용시 쿼리 날림 N+1
List<Member> list2 = em.createQuery("select m from Member m", Member.class).getResultList();
for (Member member : list2) {
    System.out.println(member);
}

// 일반적인 join을 하더라도 LAZY, EAGER에 따라 LAZY면 team쿼리를 2번날리고, EAGER이면 사용할때 다시 쿼리를 매번 날림
List<Member> list3 = em.createQuery("select m from Member m join m.team t", Member.class).getResultList();
for (Member member : list3) {
    System.out.println("member = " + member);
    System.out.println("member.getTeam().getName() = " + member.getTeam().getName());
}

// fetch join을 사용하면 한번에 다 가져오기 때문에(fetch 전략과 관계없이) N+1 문제가 발생하지 않는다
List<Member> list4 = em.createQuery("select m from Member m join fetch m.team", Member.class).getResultList();
for (Member member : list4) {
    System.out.println("member = " + member);
    System.out.println("member.getTeam().getName() = " + member.getTeam().getName());
}

-> FetchType 보다 우선임

-> 뭐 em.find()는 제외하고
-> 예를들어 JPQL이 "select m.team from Member m" 이거라면 결국 묵시적 내부조인이 일어나서 문제가 있음
-> 되도록 명시적 조인을 사용해야 하지만 이 명시적 조인도 그냥 일반 조인으로 사용하면
-> 일반 JOIN은 결국 EAGER, LAZY 설정을 따라가 N+1 문제를 발생시킴 
-> 때문에 fetch 조인을 사용해서 N+1문제를 해결해야함



★★★
★★★
★★★
+ 페치조인 주의점
select o from Order o join fetch o.member m join fetch o.delivery d
select 
    new jpabook.jpashop.repository.OrderSimpleQueryDto(o.id, m.name, o.orderDate, o.status, d.address) 
from Order o 
join o.member m 
join o.delivery d
: select new ... -> 엔티티가 아니라 DTO를 조회하기 떄문에 fetch join을 사용할 수 없다 -> 페치조인보다 성능이 살짝 좋음(별차이 없긴함), 유연하지 못함
: select o ...   -> fetch join은 엔티티 그래프를 한번에 같이 조회하기 위해 사용하는 기능임 -> select절에 엔티티를 지정 -> 상대적으로 유연함(로직에서 활용성이 있음)
-> 페치조인을 사용하는게 맞다
-> repository에선 엔티티를 조회하는게 맞다
-> DTO를 뽑아야 하는 경우는 패키지, repository 클래스를 따로 만들어준다

엔티티 DTO변환  vs  DTO로 직접 조회
1. 우선 엔티티를 DTO로 변환하는 방법을 선택한다.
2. 필요하면 페치 조인으로 성능을 최적화 한다. 대부분의 성능 이슈가 해결된다.
3. 그래도 안되면 DTO로 직접 조회하는 방법을 사용한다.
4. 최후의 방법은 JPA가 제공하는 네이티브 SQL이나 스프링 JDBC Template을 사용해서 SQL을 직접 사용한다